/**
 * Generated by orval v6.11.1 üç∫
 * Do not edit manually.
 * Iron Fish API
 * The Rest API to enable public access to Iron Fish data
 */
import axios from 'axios'
import type {
  AxiosRequestConfig,
  AxiosResponse,
  AxiosError
} from 'axios'
import {
  useQuery
} from '@tanstack/react-query'
import type {
  UseQueryOptions,
  QueryFunction,
  UseQueryResult,
  QueryKey
} from '@tanstack/react-query'
import type {
  UsersFindParams,
  UsersMetricsParams,
  UsersListParams
} from './ironfish.schemas'



/**
 * @summary Gets a specific User by 'graffiti'
 */
export const usersFind = (
    params: UsersFindParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    return axios.get(
      `/users/find`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getUsersFindQueryKey = (params: UsersFindParams,) => [`/users/find`, ...(params ? [params]: [])];

    
export type UsersFindQueryResult = NonNullable<Awaited<ReturnType<typeof usersFind>>>
export type UsersFindQueryError = AxiosError<unknown>

export const useUsersFind = <TData = Awaited<ReturnType<typeof usersFind>>, TError = AxiosError<unknown>>(
 params: UsersFindParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof usersFind>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getUsersFindQueryKey(params);

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof usersFind>>> = ({ signal }) => usersFind(params, { signal, ...axiosOptions });


  

  const query = useQuery<Awaited<ReturnType<typeof usersFind>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}

/**
 * @summary Gets a specific User
 */
export const usersGet = (
    id: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    return axios.get(
      `/users/${id}`,options
    );
  }


export const getUsersGetQueryKey = (id: number,) => [`/users/${id}`];

    
export type UsersGetQueryResult = NonNullable<Awaited<ReturnType<typeof usersGet>>>
export type UsersGetQueryError = AxiosError<unknown>

export const useUsersGet = <TData = Awaited<ReturnType<typeof usersGet>>, TError = AxiosError<unknown>>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof usersGet>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getUsersGetQueryKey(id);

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof usersGet>>> = ({ signal }) => usersGet(id, { signal, ...axiosOptions });


  

  const query = useQuery<Awaited<ReturnType<typeof usersGet>>, TError, TData>(queryKey, queryFn, {enabled: !!(id), ...queryOptions}) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}

/**
 * @summary Gets metrics for a specific User
 */
export const usersMetrics = (
    id: number,
    params: UsersMetricsParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    return axios.get(
      `/users/${id}/metrics`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getUsersMetricsQueryKey = (id: number,
    params: UsersMetricsParams,) => [`/users/${id}/metrics`, ...(params ? [params]: [])];

    
export type UsersMetricsQueryResult = NonNullable<Awaited<ReturnType<typeof usersMetrics>>>
export type UsersMetricsQueryError = AxiosError<unknown>

export const useUsersMetrics = <TData = Awaited<ReturnType<typeof usersMetrics>>, TError = AxiosError<unknown>>(
 id: number,
    params: UsersMetricsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof usersMetrics>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getUsersMetricsQueryKey(id,params);

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof usersMetrics>>> = ({ signal }) => usersMetrics(id,params, { signal, ...axiosOptions });


  

  const query = useQuery<Awaited<ReturnType<typeof usersMetrics>>, TError, TData>(queryKey, queryFn, {enabled: !!(id), ...queryOptions}) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}

/**
 * @summary Returns a paginated list of users
 */
export const usersList = (
    params?: UsersListParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    return axios.get(
      `/users`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getUsersListQueryKey = (params?: UsersListParams,) => [`/users`, ...(params ? [params]: [])];

    
export type UsersListQueryResult = NonNullable<Awaited<ReturnType<typeof usersList>>>
export type UsersListQueryError = AxiosError<unknown>

export const useUsersList = <TData = Awaited<ReturnType<typeof usersList>>, TError = AxiosError<unknown>>(
 params?: UsersListParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof usersList>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getUsersListQueryKey(params);

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof usersList>>> = ({ signal }) => usersList(params, { signal, ...axiosOptions });


  

  const query = useQuery<Awaited<ReturnType<typeof usersList>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}

