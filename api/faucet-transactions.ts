/**
 * Generated by orval v6.11.1 üç∫
 * Do not edit manually.
 * Iron Fish API
 * The Rest API to enable public access to Iron Fish data
 */
import axios from 'axios'
import type {
  AxiosRequestConfig,
  AxiosResponse,
  AxiosError
} from 'axios'
import {
  useQuery
} from '@tanstack/react-query'
import type {
  UseQueryOptions,
  QueryFunction,
  UseQueryResult,
  QueryKey
} from '@tanstack/react-query'



/**
 * @summary Returns the global status of faucet transactions
 */
export const faucetTransactionsStatus = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    return axios.get(
      `/faucet_transactions/status`,options
    );
  }


export const getFaucetTransactionsStatusQueryKey = () => [`/faucet_transactions/status`];

    
export type FaucetTransactionsStatusQueryResult = NonNullable<Awaited<ReturnType<typeof faucetTransactionsStatus>>>
export type FaucetTransactionsStatusQueryError = AxiosError<unknown>

export const useFaucetTransactionsStatus = <TData = Awaited<ReturnType<typeof faucetTransactionsStatus>>, TError = AxiosError<unknown>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof faucetTransactionsStatus>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFaucetTransactionsStatusQueryKey();

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof faucetTransactionsStatus>>> = ({ signal }) => faucetTransactionsStatus({ signal, ...axiosOptions });


  

  const query = useQuery<Awaited<ReturnType<typeof faucetTransactionsStatus>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}

/**
 * @summary Gets a specific Faucet Transaction
 */
export const faucetTransactionsFind = (
    id: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    return axios.get(
      `/faucet_transactions/${id}`,options
    );
  }


export const getFaucetTransactionsFindQueryKey = (id: number,) => [`/faucet_transactions/${id}`];

    
export type FaucetTransactionsFindQueryResult = NonNullable<Awaited<ReturnType<typeof faucetTransactionsFind>>>
export type FaucetTransactionsFindQueryError = AxiosError<unknown>

export const useFaucetTransactionsFind = <TData = Awaited<ReturnType<typeof faucetTransactionsFind>>, TError = AxiosError<unknown>>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof faucetTransactionsFind>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFaucetTransactionsFindQueryKey(id);

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof faucetTransactionsFind>>> = ({ signal }) => faucetTransactionsFind(id, { signal, ...axiosOptions });


  

  const query = useQuery<Awaited<ReturnType<typeof faucetTransactionsFind>>, TError, TData>(queryKey, queryFn, {enabled: !!(id), ...queryOptions}) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}

