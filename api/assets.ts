/**
 * Generated by orval v6.11.1 üç∫
 * Do not edit manually.
 * Iron Fish API
 * The Rest API to enable public access to Iron Fish data
 */
import axios from 'axios'
import type {
  AxiosRequestConfig,
  AxiosResponse,
  AxiosError
} from 'axios'
import {
  useQuery
} from '@tanstack/react-query'
import type {
  UseQueryOptions,
  QueryFunction,
  UseQueryResult,
  QueryKey
} from '@tanstack/react-query'
import type {
  AssetsFindParams,
  AssetsListParams
} from './ironfish.schemas'



/**
 * @summary Gets an asset by identifier
 */
export const assetsFind = (
    params: AssetsFindParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    return axios.get(
      `/assets/find`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getAssetsFindQueryKey = (params: AssetsFindParams,) => [`/assets/find`, ...(params ? [params]: [])];

    
export type AssetsFindQueryResult = NonNullable<Awaited<ReturnType<typeof assetsFind>>>
export type AssetsFindQueryError = AxiosError<unknown>

export const useAssetsFind = <TData = Awaited<ReturnType<typeof assetsFind>>, TError = AxiosError<unknown>>(
 params: AssetsFindParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof assetsFind>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAssetsFindQueryKey(params);

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof assetsFind>>> = ({ signal }) => assetsFind(params, { signal, ...axiosOptions });


  

  const query = useQuery<Awaited<ReturnType<typeof assetsFind>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}

/**
 * @summary Lists assets
 */
export const assetsList = (
    params?: AssetsListParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    return axios.get(
      `/assets`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getAssetsListQueryKey = (params?: AssetsListParams,) => [`/assets`, ...(params ? [params]: [])];

    
export type AssetsListQueryResult = NonNullable<Awaited<ReturnType<typeof assetsList>>>
export type AssetsListQueryError = AxiosError<unknown>

export const useAssetsList = <TData = Awaited<ReturnType<typeof assetsList>>, TError = AxiosError<unknown>>(
 params?: AssetsListParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof assetsList>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAssetsListQueryKey(params);

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof assetsList>>> = ({ signal }) => assetsList(params, { signal, ...axiosOptions });


  

  const query = useQuery<Awaited<ReturnType<typeof assetsList>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}

