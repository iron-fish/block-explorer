/**
 * Generated by orval v6.11.1 üç∫
 * Do not edit manually.
 * Iron Fish API
 * The Rest API to enable public access to Iron Fish data
 */
import axios from 'axios'
import type {
  AxiosRequestConfig,
  AxiosResponse,
  AxiosError
} from 'axios'
import {
  useQuery,
  useMutation
} from '@tanstack/react-query'
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey
} from '@tanstack/react-query'
import type {
  EventsListParams
} from './ironfish.schemas'



/**
 * @summary Returns a paginated list of events
 */
export const eventsList = (
    params?: EventsListParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    return axios.get(
      `/events`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getEventsListQueryKey = (params?: EventsListParams,) => [`/events`, ...(params ? [params]: [])];

    
export type EventsListQueryResult = NonNullable<Awaited<ReturnType<typeof eventsList>>>
export type EventsListQueryError = AxiosError<unknown>

export const useEventsList = <TData = Awaited<ReturnType<typeof eventsList>>, TError = AxiosError<unknown>>(
 params?: EventsListParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof eventsList>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getEventsListQueryKey(params);

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof eventsList>>> = ({ signal }) => eventsList(params, { signal, ...axiosOptions });


  

  const query = useQuery<Awaited<ReturnType<typeof eventsList>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}

export const eventsDelete = (
    id: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    return axios.delete(
      `/events/${id}`,options
    );
  }



    export type EventsDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof eventsDelete>>>
    
    export type EventsDeleteMutationError = AxiosError<unknown>

    export const useEventsDelete = <TError = AxiosError<unknown>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof eventsDelete>>, TError,{id: number}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof eventsDelete>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  eventsDelete(id,axiosOptions)
        }

        

      return useMutation<Awaited<ReturnType<typeof eventsDelete>>, TError, {id: number}, TContext>(mutationFn, mutationOptions);
    }
    