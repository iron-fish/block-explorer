/**
 * Generated by orval v6.11.1 üç∫
 * Do not edit manually.
 * Iron Fish API
 * The Rest API to enable public access to Iron Fish data
 */
import axios from 'axios'
import type {
  AxiosRequestConfig,
  AxiosResponse,
  AxiosError
} from 'axios'
import {
  useQuery
} from '@tanstack/react-query'
import type {
  UseQueryOptions,
  QueryFunction,
  UseQueryResult,
  QueryKey
} from '@tanstack/react-query'



/**
 * @summary Gets the global config of event metrics
 */
export const metricsConfig = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    return axios.get(
      `/metrics/config`,options
    );
  }


export const getMetricsConfigQueryKey = () => [`/metrics/config`];

    
export type MetricsConfigQueryResult = NonNullable<Awaited<ReturnType<typeof metricsConfig>>>
export type MetricsConfigQueryError = AxiosError<unknown>

export const useMetricsConfig = <TData = Awaited<ReturnType<typeof metricsConfig>>, TError = AxiosError<unknown>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof metricsConfig>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getMetricsConfigQueryKey();

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof metricsConfig>>> = ({ signal }) => metricsConfig({ signal, ...axiosOptions });


  

  const query = useQuery<Awaited<ReturnType<typeof metricsConfig>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}

