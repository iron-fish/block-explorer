/**
 * Generated by orval v6.11.1 üç∫
 * Do not edit manually.
 * Iron Fish API
 * The Rest API to enable public access to Iron Fish data
 */
import axios from 'axios'
import type {
  AxiosRequestConfig,
  AxiosResponse,
  AxiosError
} from 'axios'
import {
  useQuery
} from '@tanstack/react-query'
import type {
  UseQueryOptions,
  QueryFunction,
  UseQueryResult,
  QueryKey
} from '@tanstack/react-query'
import type {
  TransactionsFindParams,
  TransactionsListParams
} from './ironfish.schemas'



/**
 * @summary Gets a specific transaction by 'hash'
 */
export const transactionsFind = (
    params: TransactionsFindParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    return axios.get(
      `/transactions/find`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getTransactionsFindQueryKey = (params: TransactionsFindParams,) => [`/transactions/find`, ...(params ? [params]: [])];

    
export type TransactionsFindQueryResult = NonNullable<Awaited<ReturnType<typeof transactionsFind>>>
export type TransactionsFindQueryError = AxiosError<unknown>

export const useTransactionsFind = <TData = Awaited<ReturnType<typeof transactionsFind>>, TError = AxiosError<unknown>>(
 params: TransactionsFindParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof transactionsFind>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getTransactionsFindQueryKey(params);

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof transactionsFind>>> = ({ signal }) => transactionsFind(params, { signal, ...axiosOptions });


  

  const query = useQuery<Awaited<ReturnType<typeof transactionsFind>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}

/**
 * @summary Returns a paginated list of transactions from the chain
 */
export const transactionsList = (
    params?: TransactionsListParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    return axios.get(
      `/transactions`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }


export const getTransactionsListQueryKey = (params?: TransactionsListParams,) => [`/transactions`, ...(params ? [params]: [])];

    
export type TransactionsListQueryResult = NonNullable<Awaited<ReturnType<typeof transactionsList>>>
export type TransactionsListQueryError = AxiosError<unknown>

export const useTransactionsList = <TData = Awaited<ReturnType<typeof transactionsList>>, TError = AxiosError<unknown>>(
 params?: TransactionsListParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof transactionsList>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getTransactionsListQueryKey(params);

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof transactionsList>>> = ({ signal }) => transactionsList(params, { signal, ...axiosOptions });


  

  const query = useQuery<Awaited<ReturnType<typeof transactionsList>>, TError, TData>(queryKey, queryFn, queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}

